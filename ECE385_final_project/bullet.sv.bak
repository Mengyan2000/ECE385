module  bullet ( input Reset, frame_clk, VGA_VS,
					input statues,
					input [9:0]   planeX, planeY,
               output [9:0]  bulletX, bulletY);
    
    logic [9:0] Plane_X_Pos, Plane_X_Motion, Plane_Y_Pos, Plane_Y_Motion, Plane_X_Size, Plane_Y_Size;
	 
    parameter [9:0] Plane_X_Center=150;  // Center position on the X axis
    parameter [9:0] Plane_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] Plane_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Plane_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] Plane_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Plane_Y_Max=479;     // Bottommost point on the Y axis
    parameter [9:0] bullet_X_Step=1;      // Step size on the X axis
    parameter [9:0] bullet_Y_Step=1;      // Step size on the Y axis

    assign Plane_X_Size = 30;  
	 assign Plane_Y_Size = 18;// assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
    always_ff @ (posedge Reset or posedge VGA_VS )
    begin: Move_Ball
        if (Reset)  // Asynchronous Reset
        begin 
            Plane_Y_Motion <= 10'd0; //Ball_Y_Step;
				Plane_X_Motion <= 10'd0; //Ball_X_Step;
				Plane_Y_Pos <= planeX;
				Plane_X_Pos <= planeY;

        end
           
        else 
        begin 
				 
				 case (statues)
					1'b1 : begin

								Plane_X_Motion <= 1;//A
								Plane_Y_Motion<= 0;
							  end  
					default: begin
							  Plane_Y_Motion <= 0;
							  Plane_X_Motion <= 0;
							  end
			   endcase
				if ( (Plane_Y_Pos + Plane_Y_Size) >= Plane_Y_Max )  // Ball is at the bottom edge, BOUNCE!
					  Plane_Y_Motion <= (~ (Plane_Y_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Plane_Y_Pos - Plane_Y_Size) <= Plane_Y_Min )  // Ball is at the top edge, BOUNCE!
					  Plane_Y_Motion <= Plane_Y_Step;
					  
				  else if ( (Plane_X_Pos + Plane_X_Size) >= Plane_X_Max )  // Ball is at the Right edge, BOUNCE!
					  Plane_X_Motion <= (~ (Plane_X_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Plane_X_Pos - Plane_X_Size) <= Plane_X_Min )  // Ball is at the Left edge, BOUNCE!
					  Plane_X_Motion <= Plane_X_Step;
					  
				 //else 
					  //Ball_Y_Motion <= Ball_Y_Motion;  // Ball is somewhere in the middle, don't bounce, just keep moving
					  
				 
				
				 Plane_Y_Pos <= (Plane_Y_Pos + Plane_Y_Motion);  // Update ball position
				 Plane_X_Pos <= (Plane_X_Pos + Plane_X_Motion);
				
				
			
		end  
    end
	
       
    assign bulletX = Plane_X_Pos;
   
    assign bulletY = Plane_Y_Pos;
   
    

endmodule